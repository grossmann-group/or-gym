import or_gym
import pickle
from pyomo.opt import SolverFactory
from or_gym.algos.supply_network.math_prog import *
from or_gym.algos.supply_network.stoch_prog import *

#imputs
path = "../../scenarios/"
ver = "v3"
model = "MSSP"
mode = "RH"
window = 10
solver = "gurobi"

#create file names
filename = path+"in"+ver+".pkl"
D = pickle.load(open(filename,'rb'))
filesave = path+model+"_"+mode+"_"+ver+"/"

#solve shrinking horizon model
total_profit_record = []
non_optimal_record = []
cpu_time_record = []
wall_time_record = []
import time

for i in range(100):
    start_time = time.time()
    #create environmnet with user specified demand
    user_D = {(1,0): D[:,i]} #assign scenario to retail/market link
    sample_path = {(1,0): True} #note that the specified demand is sampled from the prob distribution
    env = or_gym.make("InvManagement-"+ver, env_config={'user_D': user_D,
                                                        'sample_path': sample_path})
    #loop through each period in the simulation, optimizing along the way
    for t in range(env.num_periods):
        #create model
        m=net_im_stoch_lp_model(env,window_size=window)
        #select solver
        s=SolverFactory(solver)
        s.options['threads'] = 3
        #solve model
        res=s.solve(m, tee=False)
        #check result is optimal
        if str(res['Solver'][0]['Termination condition']) != 'optimal':
            print("ERROR: NOT OPTIMAL")
            non_optimal_record.append(i)
            break
        #extract reorder quantities
        Ropt=m.R.get_values()
        #pass action for the current timestep only (i.e. t=0)
        action={e[2:]:Ropt[e] for e in Ropt.keys() if (e[0]==0 and e[1]==0)}
        outcome=env.step(action)
        cpu_time_record.append(res['Solver'][0]['Time'])
    #print profit for the total simulation run
    print(env.P.sum().sum())
    total_profit_record.append(env.P.sum().sum())
    end_time = time.time()
    wall_time_record.append(end_time-start_time)

    #pickle environment
    pickle.dump(env, open(filesave+"run"+str(i)+".pkl","wb"))
    # break 
    # if i >=5:
    #     break 
print(filesave)

#MSSP, v3, RH
# 782.305
# 783.8400000000001
# 750.6200000000002
# 801.2
# 746.8400000000001
# 715.9150000000004
# 749.6050000000001
# 768.5899999999999
# 776.2
# 710.7000000000003
# 751.5850000000002
# 842.1250000000001
# 726.8900000000001
# 768.4950000000002
# 701.435
# 794.3050000000002
# 850.2000000000003
# 741.5600000000002
# 728.8750000000002
# 691.47
# 771.25
# 791.5900000000004
# 697.9800000000002
# 805.2500000000001
# 732.6950000000003
# 805.64
# 842.7250000000001
# 726.3100000000004
# 820.96
# 788.3200000000002
# 690.2700000000002
# 786.3700000000002
# 849.8700000000001
# 717.1150000000002
# 803.445
# 766.0150000000002
# 788.7650000000001
# 760.98
# 705.4449999999999
# 718.2950000000002
# 775.8900000000004
# 716.3000000000002
# 797.5850000000002
# 800.6950000000002
# 776.3500000000004
# 804.3700000000002
# 747.1900000000003
# 742.335
# 688.7350000000002
# 790.325
# 774.3350000000002
# 675.3850000000002
# 641.7950000000001
# 792.745
# 767.9100000000001
# 821.7500000000001
# 787.3300000000002
# 670.7800000000001
# 789.9950000000001
# 775.4150000000003
# 769.2650000000001
# 764.97
# 742.7750000000002
# 693.04
# 749.21
# 626.4750000000001
# 691.0100000000001
# 705.8600000000001
# 770.7750000000001
# 845.6800000000001
# 800.9800000000002
# 783.7400000000002
# 782.4150000000002
# 762.8449999999998
# 794.1400000000001
# 763.5950000000001
# 839.1600000000002
# 696.8650000000002
# 690.5850000000003
# 725.5450000000001
# 829.3550000000001
# 732.9750000000001
# 783.1100000000002
# 816.495
# 709.05
# 774.6500000000001
# 698.8500000000003
# 722.7750000000001
# 790.7800000000003
# 751.7100000000003
# 793.2250000000004
# 725.4350000000002
# 744.5849999999999
# 731.8550000000002
# 773.2600000000002
# 818.6650000000002
# 815.6700000000001
# 787.69
# 867.6750000000002
# 712.4800000000002

# cpu_time_record_iter
# [11.318824052810669, 11.161803722381592, 11.228810787200928, 11.285428524017334, 11.225542783737183, 11.273080825805664, 11.265379667282104, 11.222399234771729, 11.254255533218384, 11.320226430892944, 11.07252550125122, 11.238521099090576, 10.910245656967163, 11.214205265045166, 11.17463755607605, 11.258062601089478, 11.23742938041687, 11.124883651733398, 11.276476383209229, 11.253517389297485, 11.42012619972229, 11.027136325836182, 11.375542163848877, 11.125405550003052, 11.283016681671143, 11.104300737380981, 11.300636768341064, 11.35977053642273, 11.336538076400757, 11.03721308708191, 11.148608446121216, 11.195211172103882, 11.236515283584595, 11.241524457931519, 11.139869451522827, 11.180497407913208, 11.105128765106201, 11.092295169830322, 11.263819217681885, 11.162669658660889, 11.411832332611084, 11.1996910572052, 11.290708303451538, 11.27208662033081, 11.304294347763062, 11.20011281967163, 11.246617317199707, 11.270359516143799, 11.259714365005493, 11.199572563171387, 11.098148345947266, 11.197437524795532, 11.149474143981934, 11.176625967025757, 11.262668371200562, 11.214732885360718, 11.24045443534851, 11.331855535507202, 11.390254020690918, 11.059792041778564, 11.176559686660767, 11.282154083251953, 11.28479552268982, 11.157522201538086, 11.2964928150177, 11.257194757461548, 11.091572284698486, 11.482156991958618, 11.281314373016357, 11.157622575759888, 11.117756128311157, 11.230150938034058, 11.142098903656006, 11.111585855484009, 11.155388832092285, 11.25774335861206, 11.365782976150513, 11.264587163925171, 11.390463829040527, 11.399130821228027, 11.105640411376953, 11.260929107666016, 11.135876893997192, 11.461169719696045, 11.326061010360718, 11.189636468887329, 11.43622636795044, 11.096557855606079, 11.179630279541016, 11.28210711479187, 11.379305839538574, 11.15079379081726, 11.334385633468628, 11.27689528465271, 11.20199704170227, 11.386904239654541, 11.183902502059937, 11.406824827194214, 11.285651683807373, 11.173466205596924]
#  wall_time_record
# [346.8769099712372, 346.57423734664917, 345.86224484443665, 346.21255445480347, 346.5869708061218, 347.1922471523285, 347.06184697151184, 346.40354108810425, 346.6078896522522, 347.2477469444275, 346.85969257354736, 346.8545255661011, 346.19987320899963, 347.4395718574524, 346.0547065734863, 346.34953331947327, 345.9816918373108, 346.282710313797, 346.6188461780548, 346.181702375412, 346.2438349723816, 347.1285893917084, 347.48775601387024, 347.14652705192566, 346.56703901290894, 347.36125326156616, 347.7849564552307, 347.62754678726196, 346.8385236263275, 347.7569754123688, 347.7630681991577, 347.50500416755676, 346.7743136882782, 347.3679826259613, 346.22217988967896, 346.57749485969543, 346.4686772823334, 346.14391565322876, 346.7105748653412, 345.7106897830963, 347.08663058280945, 347.2447588443756, 347.3002827167511, 346.90111112594604, 347.64430499076843, 347.58026003837585, 347.37360286712646, 347.4229202270508, 347.06744742393494, 346.52829575538635, 347.04779529571533, 347.4543631076813, 346.76675391197205, 346.3396396636963, 346.33910369873047, 346.8472628593445, 347.09446120262146, 347.8183538913727, 347.41539788246155, 346.620947599411, 346.7391149997711, 347.07997727394104, 346.8303427696228, 346.4165663719177, 346.40773344039917, 346.75988149642944, 346.7851011753082, 347.61126732826233, 347.72113513946533, 346.8723738193512, 347.6248700618744, 347.14638018608093, 346.12040066719055, 346.14042377471924, 345.9835500717163, 345.9895613193512, 346.3663511276245, 347.0452060699463, 346.6509108543396, 346.1783492565155, 345.9085202217102, 347.2834746837616, 346.99061131477356, 346.89417147636414, 346.96406269073486, 347.0843753814697, 347.9431014060974, 347.0898323059082, 347.207603931427, 347.31655168533325, 346.95549726486206, 346.49680495262146, 346.93239164352417, 346.93288135528564, 346.5183515548706, 346.5424258708954, 347.01977801322937, 346.67989015579224, 346.8208692073822, 346.0684862136841]
